cols_merge(
columns = c("estimate_No",	"lower_ci_No", "upper_ci_No"),
pattern = "<<{1}>><< [{2}, {3}]>>"
) %>%
cols_merge(
columns = c("estimate_Missing",	"lower_ci_Missing", "upper_ci_Missing"),
pattern = "<<{1}>><< [{2}, {3}]>>"
) %>%
tab_spanner(
label = "Total",
columns = (c("estimate_Total", "p.value_Total"))
) %>%
tab_spanner(
label = "Breastfed",
columns = (c("estimate_Yes", "p.value_Yes"))
) %>%
tab_spanner(
label = "Bottlefed",
columns = (c("estimate_No", "p.value_No"))
) %>%
tab_spanner(
label = "Missing",
columns = (c("estimate_Missing", "p.value_Missing"))
) %>%
cols_align(
align = "center",
columns = starts_with(c("estimate", "p.value"))
) %>%
cols_label(
estimate_Total = md("*β* [CI]"),
p.value_Total = "p-value",
estimate_Yes = md("*β* [CI]"),
p.value_Yes = "p-value",
estimate_No = md("*β* [CI]"),
p.value_No = "p-value",
estimate_Missing = md("*β* [CI]"),
p.value_Missing = "p-value"
) %>%
cols_align(align = "left", columns = 1)
}
)
model_summary_interactions %>%
filter(str_detect(term, "rs[0-9]+_[ACGT]+:breastfed_as_a_baby")) %>%
mutate(variant = str_extract(term, "rs[0-9]+"),
lower_ci = estimate-(1.96*std.error),
upper_ci = estimate+(1.96*std.error)
) %>%
select(-c(term, statistic, std.error)) %>%
pivot_wider(
names_from = variant,
values_from = c(estimate, p.value, lower_ci, upper_ci)
) %>%
gt(rowname_col = "covariates", groupname_col = "outcome") %>%
fmt_number(
columns = starts_with(c("estimate", "std.error", "lower_ci", "upper_ci")),
decimals = 2
) %>%
cols_merge(
columns = c("estimate_rs1535",	"lower_ci_rs1535", "upper_ci_rs1535"),
pattern = "<<{1}>><< [{2}, {3}]>>"
) %>%
cols_merge(
columns = c("estimate_rs174575",	"lower_ci_rs174575", "upper_ci_rs174575"),
pattern = "<<{1}>><< [{2}, {3}]>>"
) %>%
cols_merge(
columns = c("estimate_rs174583",	"lower_ci_rs174583", "upper_ci_rs174583"),
pattern = "<<{1}>><< [{2}, {3}]>>"
) %>%
tab_spanner(
label = "rs1535",
columns = (c("estimate_rs1535", "p.value_rs1535"))
) %>%
tab_spanner(
label = "rs174575",
columns = (c("estimate_rs174575", "p.value_rs174575"))
) %>%
tab_spanner(
label = "rs174583",
columns = (c("estimate_rs174583", "p.value_rs174583"))
) %>%
cols_align(
align = "center",
columns = starts_with(c("estimate", "p.value"))
) %>%
cols_label(
estimate_rs1535 = md("*β* [CI]"),
p.value_rs1535 = "p-value",
estimate_rs174575 = md("*β* [CI]"),
p.value_rs174575 = "p-value",
estimate_rs174583 = md("*β* [CI]"),
p.value_rs174583 = "p-value"
) %>%
cols_align(align = "left", columns = 1)
load("~/Repositories/mrxp_breastfed_cog/temp/clean/any_ancestry/model_summaries_recessive.RData")
# Adapted from: https://gt.rstudio.com/articles/case-study-clinical-tables.html
c("rs1535", "rs174575", "rs174583") %>%
map(
\(x){
summary_stats_plots %>%
ungroup %>%
mutate(variant = stringr::str_extract(variant, "rs[0-9]+"),
lower_ci = estimate-(1.96*std.error),
upper_ci = estimate+(1.96*std.error)
) %>%
# This is temporary just to test, ideally I'd split them in 3 and run the same function
# with purrr::map()
filter(variant == x) %>%
select(-c(variant, statistic, std.error)) %>%
pivot_wider(
names_from = stratum,
values_from = c(estimate, p.value, lower_ci, upper_ci)) %>%
gt(rowname_col = "covariates", groupname_col = "outcome") %>%
fmt_number(
columns = starts_with(c("estimate", "std.error", "lower_ci", "upper_ci")),
decimals = 2
) %>%
cols_merge(
columns = c("estimate_Total",	"lower_ci_Total", "upper_ci_Total"),
pattern = "<<{1}>><< [{2}, {3}]>>"
) %>%
cols_merge(
columns = c("estimate_Yes",	"lower_ci_Yes", "upper_ci_Yes"),
pattern = "<<{1}>><< [{2}, {3}]>>"
) %>%
cols_merge(
columns = c("estimate_No",	"lower_ci_No", "upper_ci_No"),
pattern = "<<{1}>><< [{2}, {3}]>>"
) %>%
cols_merge(
columns = c("estimate_Missing",	"lower_ci_Missing", "upper_ci_Missing"),
pattern = "<<{1}>><< [{2}, {3}]>>"
) %>%
tab_spanner(
label = "Total",
columns = (c("estimate_Total", "p.value_Total"))
) %>%
tab_spanner(
label = "Breastfed",
columns = (c("estimate_Yes", "p.value_Yes"))
) %>%
tab_spanner(
label = "Bottlefed",
columns = (c("estimate_No", "p.value_No"))
) %>%
tab_spanner(
label = "Missing",
columns = (c("estimate_Missing", "p.value_Missing"))
) %>%
cols_align(
align = "center",
columns = starts_with(c("estimate", "p.value"))
) %>%
cols_label(
estimate_Total = md("*β* [CI]"),
p.value_Total = "p-value",
estimate_Yes = md("*β* [CI]"),
p.value_Yes = "p-value",
estimate_No = md("*β* [CI]"),
p.value_No = "p-value",
estimate_Missing = md("*β* [CI]"),
p.value_Missing = "p-value"
) %>%
cols_align(align = "left", columns = 1)
}
)
model_summary_interactions %>%
filter(str_detect(term, "rs[0-9]+_[ACGT]+:breastfed_as_a_baby")) %>%
mutate(variant = str_extract(term, "rs[0-9]+"),
lower_ci = estimate-(1.96*std.error),
upper_ci = estimate+(1.96*std.error)
) %>%
select(-c(term, statistic, std.error)) %>%
pivot_wider(
names_from = variant,
values_from = c(estimate, p.value, lower_ci, upper_ci)
) %>%
gt(rowname_col = "covariates", groupname_col = "outcome") %>%
fmt_number(
columns = starts_with(c("estimate", "std.error", "lower_ci", "upper_ci")),
decimals = 2
) %>%
cols_merge(
columns = c("estimate_rs1535",	"lower_ci_rs1535", "upper_ci_rs1535"),
pattern = "<<{1}>><< [{2}, {3}]>>"
) %>%
cols_merge(
columns = c("estimate_rs174575",	"lower_ci_rs174575", "upper_ci_rs174575"),
pattern = "<<{1}>><< [{2}, {3}]>>"
) %>%
cols_merge(
columns = c("estimate_rs174583",	"lower_ci_rs174583", "upper_ci_rs174583"),
pattern = "<<{1}>><< [{2}, {3}]>>"
) %>%
tab_spanner(
label = "rs1535",
columns = (c("estimate_rs1535", "p.value_rs1535"))
) %>%
tab_spanner(
label = "rs174575",
columns = (c("estimate_rs174575", "p.value_rs174575"))
) %>%
tab_spanner(
label = "rs174583",
columns = (c("estimate_rs174583", "p.value_rs174583"))
) %>%
cols_align(
align = "center",
columns = starts_with(c("estimate", "p.value"))
) %>%
cols_label(
estimate_rs1535 = md("*β* [CI]"),
p.value_rs1535 = "p-value",
estimate_rs174575 = md("*β* [CI]"),
p.value_rs174575 = "p-value",
estimate_rs174583 = md("*β* [CI]"),
p.value_rs174583 = "p-value"
) %>%
cols_align(align = "left", columns = 1)
library(dplyr)
library(purrr)
library(tidyr)
library(gtsummary)
library(modelsummary)
# Load data in
#base::load(snakemake@input[[1]])
base::load("../../temp/clean/white_british/data_for_models.RData")
descriptive_data <-
# Round dosage to allelic count
descriptive_data %>%
mutate(
# Switch to implicit NAs
breastfed_as_a_baby = na_if(breastfed_as_a_baby, "Missing"),
breastfed_as_a_baby = recode(
breastfed_as_a_baby,
Yes = 1,
No = 0
),
sex = recode(sex, Female = 0, Male = 1)
) %>%
mutate(
yob = scale(year_of_birth_f34_0_0),
tdi = scale(townsend_deprivation_index_at_recruitment_f189_0_0)
)
rename_list <- function(.data, ...) {
mapping <- sapply(
rlang::enquos(...),
rlang::as_name
)
new_names = setNames(nm=names(.data))
# `new_name = old_name` for consistency with `dplyr::rename`
new_names[mapping] = names(mapping)
# for `old_name = new_name` use: `new_names[names(mapping)] = mapping`
setNames(.data, new_names)
}
# Create character vector for formula
formula_bf <-
function(outcome, delivery = FALSE){
basic_formula <- paste(outcome, "~ breastfed_as_a_baby")
if(delivery){
return(paste(basic_formula, "+ delivery"))
} else {
return(basic_formula)
}
}
formula_bf_age_sex <-
function(outcome, delivery = FALSE){
paste(formula_bf(outcome = outcome, delivery = delivery), "+ age + sex")
}
formula_bf_age_sex_tdi <-
function(outcome, delivery = FALSE){
paste0(formula_bf_age_sex(outcome = outcome, delivery = delivery), "+ tdi")
}
formula_bf_age_sex_tdi_pcs <-
function(outcome, delivery = FALSE){
paste(formula_bf_age_sex_tdi(outcome = outcome, delivery = delivery),
paste("+", paste0("PC", 1:40), collapse = " + "))
}
# Add descriptive stats to data
list_continuous_single_delivery_first_instance_breastfeeding <-
list_continuous_single_delivery_first_instance_breastfeeding %>%
map(\(x) inner_join(x, descriptive_data, by = "eid")) %>%
map(\(x) mutate(x, age = age_zscores))
library(dplyr)
library(purrr)
library(tidyr)
library(gtsummary)
library(modelsummary)
library(broom)
library(ggplot2)
library(patchwork)
# Load data in
base::load(snakemake@input[[1]])
library(dplyr)
library(purrr)
library(tidyr)
library(gtsummary)
library(modelsummary)
# Load data in
base::load("../../temp/clean/white_british/data_for_models.RData")
descriptive_data <-
# Round dosage to allelic count
descriptive_data %>%
mutate(
# Switch to implicit NAs
breastfed_as_a_baby = na_if(breastfed_as_a_baby, "Missing"),
breastfed_as_a_baby = recode(
breastfed_as_a_baby,
Yes = 1,
No = 0
),
sex = recode(sex, Female = 0, Male = 1)
) %>%
rename(yob = year_of_birth_f34_0_0,
tdi = townsend_deprivation_index_at_recruitment_f189_0_0)
rename_list <- function(.data, ...) {
mapping <- sapply(
rlang::enquos(...),
rlang::as_name
)
new_names = setNames(nm=names(.data))
# `new_name = old_name` for consistency with `dplyr::rename`
new_names[mapping] = names(mapping)
# for `old_name = new_name` use: `new_names[names(mapping)] = mapping`
setNames(.data, new_names)
}
# Create character vector for formula
formula_bf <-
function(outcome, delivery = FALSE){
basic_formula <- paste(outcome, "~ breastfed_as_a_baby")
if(delivery){
return(paste(basic_formula, "+ delivery"))
} else {
return(basic_formula)
}
}
formula_bf_age_sex <-
function(outcome, delivery = FALSE){
paste(formula_bf(outcome = outcome, delivery = delivery), "+ age + sex")
}
formula_bf_age_sex_tdi <-
function(outcome, delivery = FALSE){
paste0(formula_bf_age_sex(outcome = outcome, delivery = delivery), "+ tdi")
}
formula_bf_age_sex_tdi_pcs <-
function(outcome, delivery = FALSE){
paste(formula_bf_age_sex_tdi(outcome = outcome, delivery = delivery),
paste("+", paste0("PC", 1:40), collapse = " + "))
}
# Add descriptive stats to data
list_continuous_single_delivery_first_instance_breastfeeding <-
list_continuous_single_delivery_first_instance_breastfeeding %>%
map(\(x) inner_join(x, descriptive_data, by = "eid"))
list_continuous_multiple_delivery_first_instance_breastfeeding <-
within(list_continuous_multiple_delivery_first_instance_breastfeeding, rm(pairs_matching_incorrect_matches))
list_continuous_multiple_delivery_first_instance_breastfeeding <-
list_continuous_multiple_delivery_first_instance_breastfeeding %>%
map(\(x) inner_join(x, descriptive_data, by = "eid"))
list_binary_first_instance_breastfeeding <-
list_binary_first_instance_breastfeeding %>%
map(\(x) inner_join(x, descriptive_data, by = "eid")) %>%
within(., rm(prospective_memory_binary))
rm(descriptive_data)
cont_sd_unadj <-
list_continuous_single_delivery_first_instance_breastfeeding %>%
imap(
\(data, trait)
lm(formula(formula_bf(trait)), data = data)
)
cont_sd_age_sex <-
list_continuous_single_delivery_first_instance_breastfeeding %>%
imap(
\(data, trait)
lm(formula(formula_bf_age_sex(trait)), data = data)
)
cont_sd_age_sex_tdi <-
list_continuous_single_delivery_first_instance_breastfeeding %>%
imap(
\(data, trait)
lm(formula(formula_bf_age_sex_tdi(trait)), data = data)
)
cont_sd_age_sex_tdi_pcs <-
list_continuous_single_delivery_first_instance_breastfeeding %>%
imap(
\(data, trait)
lm(formula(formula_bf_age_sex_tdi_pcs(trait)), data = data)
)
# Remove unused object to save some memory
rm(list_continuous_single_delivery_first_instance_breastfeeding)
list(cont_sd_unadj,
cont_sd_age_sex,
cont_sd_age_sex_tdi,
cont_sd_age_sex_tdi_pcs) %>%
map(
\(x)
rename_list(
x,
"Years of schooling" = years_of_schooling,
"Number of offspring" = number_of_offspring,
"Total cholesterol" = total_cholesterol,
"LDL cholesterol (mmol/l)" = ldl_direct,
"HDL cholesterol (mmol/l)" = hdl_direct,
"Triglycerides (mmol/l)" = triglycerides,
"Body mass index (kg/m²)" = bmi,
"Systolic blood pressure (mmHg, controlling for medication use)" = sbp,
"Diastolic blood pressure (mmHg, controlling for medication use)" = dbp,
"Matrix pattern completion (correct answers)" = correct_answers_matrix_completion,
"Reaction time (ms)" = reaction_time_ms,
"Tower rearranging (correct answers)" = tower_rearranging_correct_answers,
"Paired associate learning (correct word pairs)" =  paired_associate_learning_correct_word_pairs
)
) %>%
pmap(
\(unadj, agesex, tdi, pcs) {
list(
"Unadjusted" = unadj,
"Adjusted for age and sex" = agesex,
"Adjusted for age, sex and TDI" = tdi,
"Adjusted for age, sex, TDI, and PCs" = pcs
)
}) %>%
modelsummary(
shape = "rbind",
statistic = 'conf.int',
coef_rename = c("age" = "Age",
"sex" = "Sex",
"breastfed_as_a_baby" = "Breastfed as a baby",
"tdi" = "Townsend deprivation index",
"deliveryOnline" = "Delivery mode"),
gof_map = c("nobs", "r.squared"))
library(dplyr)
# Load data
base::load(snakemake@input[[1]])
library(ieugwasr)
library(purrr)
library(dplyr)
snps <- c("rs1535", "rs174575", "rs174583")
observed_direction <-
tibble::tribble(
~trait, ~observed_direction,
"triglycerides", "Decreasing",
"HDL cholesterol", "Increasing",
"LDL cholesterol", "Increasing",
"Total cholesterol", "Increasing",
"Intelligence", "Decreasing"
)
knitr::kbl(observed_direction)
library(ieugwasr)
library(purrr)
library(dplyr)
snps <- c("rs1535", "rs174575", "rs174583")
observed_direction <-
tibble::tribble(
~trait, ~observed_direction,
"triglycerides", "Decreasing",
"HDL cholesterol", "Increasing",
"LDL cholesterol", "Increasing",
"Total cholesterol", "Increasing",
"Intelligence", "Decreasing"
)
knitr::kable(observed_direction)
# DHA
# GWAS from UK Biobank metabolomics
dha <- associations(variants = snps, "met-d-DHA", proxies = 0)
knitr::kable(dha)
# Align to increaser allele
dha_increaser <-
dha %>%
transmute(
rsid,
dha_increaser_allele = if_else(beta >= 0, ea, nea)
)
knitr::kable(dha_increaser)
# UKB MR-Base sumstats: https://gwas.mrcieu.ac.uk/files/ieu-b-111/ieu-b-111_report.html
triglycerides <- associations(variants = snps, id = "ieu-b-111", proxies = 0)
knitr::kable(triglycerides)
# Richardson et al. (2020): https://pubmed.ncbi.nlm.nih.gov/32203549/
hdl <- associations(variants = snps, id = "ieu-b-109", proxies = 0)
knitr::kable(hdl)
# Richardson et al. (2020): https://pubmed.ncbi.nlm.nih.gov/32203549/
ldl <- associations(variants = snps, id = "ieu-b-110", proxies = 0)
knitr::kable(ldl)
# Willer et al. 2013: https://pubmed.ncbi.nlm.nih.gov/24097068/
total_cholesterol <- associations(variants = snps, id = "ieu-a-301", proxies = 0)
total_cholesterol
# Savage et al 2018:
intelligence <- associations(variants = snps, id = "ebi-a-GCST006250", proxies = 0)
knitr::kable(intelligence)
summary_table <-
list(triglycerides, hdl, ldl, total_cholesterol, intelligence) %>%
# Subset to fields of interest
map(\(x) select(x, rsid, ea, nea, beta, trait)) %>%
reduce(full_join)
knitr::kable(summary_table)
summary_table %>%
full_join(dha_increaser) %>%
# Harmonise with DHA-increaser allele
transmute(
rsid,
trait,
beta_aligned = if_else(dha_increaser_allele == ea, beta, -1*beta)
) %>%
mutate(expected_direction = if_else(beta_aligned > 0, "Increasing", "Decreasing")) %>%
full_join(observed_direction) %>%
arrange(trait, rsid) %>%
knitr::kable()
library(readr)
library(EnsDb.Hsapiens.v75)
library(dplyr)
library(locuszoomr)
#LDlink_token <- scan("../../../", what = character())
LDlink_token <- scan(snakemake@params[["LDlink_token"]], what = character())
